generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(PATIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  doctor        Doctor?
  patient       Patient?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Doctor {
  id             String        @id @default(cuid())
  userId         String        @unique
  specialization String
  bio            String?       @db.Text
  education      String?       @db.Text
  experience     Int?          // Years of experience
  licenseNumber  String?       @unique
  availability   Json?         // Changed from Availability? to Json? for simpler structure
  
  // Relations
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments   Appointment[]
  services       Service[]     @relation("DoctorToService")
}

model Patient {
  id             String        @id @default(cuid())
  userId         String        @unique
  dateOfBirth    DateTime?
  gender         Gender?
  address        String?
  phoneNumber    String?
  medicalHistory String?       @db.Text
  
  // Relations
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments   Appointment[]
}

model Appointment {
  id          String            @id @default(cuid())
  date        DateTime
  time        String
  status      AppointmentStatus @default(PENDING)
  notes       String?           @db.Text
  doctorId    String
  patientId   String
  serviceId   String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations
  doctor      Doctor            @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient     Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  service     Service?          @relation(fields: [serviceId], references: [id])
}

model Service {
  id           String        @id @default(cuid())
  name         String
  description  String?       @db.Text
  duration     Int           // Duration in minutes
  price        Float?
  
  // Relations
  doctors      Doctor[]      @relation("DoctorToService")
  appointments Appointment[]
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}